import os
import sqlite3
from aiogram import Bot, Dispatcher, Router, types, F
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, FSInputFile
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.enums import ParseMode, ContentType
from aiogram.filters import Command
from aiogram.utils.keyboard import ReplyKeyboardBuilder
from aiogram.client.default import DefaultBotProperties
from dotenv import load_dotenv
import asyncio
import pandas as pd
import matplotlib.pyplot as plt
import tempfile
import os


# ===== .env =====
load_dotenv()
API_TOKEN = os.getenv("BOT_TOKEN")
PASSWORD = os.getenv("BOT_PASSWORD")

if not API_TOKEN:
    raise ValueError("BOT_TOKEN not found in .env file")
if not PASSWORD:
    raise ValueError("BOT_PASSWORD not found in .env file")

# ===== –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ä–∞—Å—Ö–æ–¥–æ–≤ =====
CATEGORIES = [
    "–ï–¥–∞ –¥–æ–º–∞", "–ï–¥–∞ –≤–Ω–µ –¥–æ–º–∞", "–û–¥–µ–∂–¥–∞ –∏ –æ–±—É–≤—å", "–î–µ—Ç—Å–∫–∏–µ —Ç–æ–≤–∞—Ä—ã",
    "–¢—Ä–∞–Ω—Å–ø–æ—Ä—Ç", "–ñ–ö–• –∏ –∂–∏–ª—å—ë", "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è",
    "–ü–æ–¥–∞—Ä–∫–∏", "–¢–µ—Ö–Ω–∏–∫–∞ –∏ –≥–∞–¥–∂–µ—Ç—ã", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ü—Ä–æ—á–µ–µ"
]

# ===== –ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π =====
AUTHORIZED_USERS = set()

# ===== –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö SQLite =====
def init_db():
    with sqlite3.connect("expenses.db") as conn:
        cursor = conn.cursor()
        cursor.execute("""
            CREATE TABLE IF NOT EXISTS expenses (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                user TEXT,
                category TEXT,
                title TEXT,
                amount REAL,
                date TIMESTAMP DEFAULT CURRENT_TIMESTAMP
            )
        """)

def add_expense(user: str, category: str, title: str, amount: float):
    with sqlite3.connect("expenses.db") as conn:
        cursor = conn.cursor()
        cursor.execute("INSERT INTO expenses (user, category, title, amount) VALUES (?, ?, ?, ?)",
                       (user, category, title, amount))

def get_report(period: str = "month"):
    with sqlite3.connect("expenses.db") as conn:
        cursor = conn.cursor()
        if period == "day":
            cursor.execute("""
                SELECT user, category, SUM(amount) FROM expenses
                WHERE date >= date('now', 'start of day')
                GROUP BY user, category
            """)
        elif period == "week":
            cursor.execute("""
                SELECT user, category, SUM(amount) FROM expenses
                WHERE date >= date('now', '-6 days')
                GROUP BY user, category
            """)
        else:
            cursor.execute("""
                SELECT user, category, SUM(amount) FROM expenses
                WHERE strftime('%Y-%m', date) = strftime('%Y-%m', 'now')
                GROUP BY user, category
            """)
        return cursor.fetchall()

def build_excel_report():
    with sqlite3.connect("expenses.db") as conn:
        df = pd.read_sql_query(
            "SELECT user, category, SUM(amount) as total FROM expenses GROUP BY user, category", conn
        )
        df = df.sort_values(by=["category", "user"])
        filename = os.path.join(tempfile.gettempdir(), "expenses_export.xlsx")
        df.to_excel(filename, index=False)
        return filename


def generate_plot():
    with sqlite3.connect("expenses.db") as conn:
        df = pd.read_sql_query("""
            SELECT user, category, SUM(amount) as total FROM expenses
            WHERE date >= date('now', '-6 days')
            GROUP BY user, category
        """, conn)
        if df.empty:
            return None

        users = df["user"].unique()
        colors = {}
        palette = ["#3B7DDD", "#D95C9B", "#FDBA58", "#8BD17C"]
        for i, user in enumerate(users):
            colors[user] = palette[i % len(palette)]

        df["category"] = df["category"].str.strip()
        pivot = df.pivot(index="category", columns="user", values="total").fillna(0)
        fig, ax = plt.subplots()
        pivot.plot(kind="bar", stacked=True, ax=ax, color=[colors.get(u, "gray") for u in pivot.columns])
        ax.set_title("–†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º")
        ax.set_ylabel("–°—É–º–º–∞, ‚ÇΩ")
        fig.tight_layout()

        file = os.path.join(os.path.dirname(__file__), "expenses_plot.png")
        fig.savefig(file)
        plt.close(fig)
        return file


# ===== FSM =====
class AuthForm(StatesGroup):
    waiting_for_password = State()

class ExpenseForm(StatesGroup):
    category = State()
    title = State()
    amount = State()

# ===== –•–µ–Ω–¥–ª–µ—Ä—ã =====
router = Router()

@router.message(Command("start"))
async def cmd_start(message: types.Message, state: FSMContext):
    if message.from_user.id not in AUTHORIZED_USERS:
        await state.set_state(AuthForm.waiting_for_password)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –±–æ—Ç—É:")
    else:
        await show_main_menu(message)

@router.message(AuthForm.waiting_for_password)
async def process_password(message: types.Message, state: FSMContext):
    if message.text.strip() == PASSWORD:
        AUTHORIZED_USERS.add(message.from_user.id)
        await state.clear()
        await show_main_menu(message)
    else:
        await message.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")

async def show_main_menu(message: types.Message):
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")],
            [KeyboardButton(text="–û—Ç—á–µ—Ç –º–µ—Å—è—Ü"), KeyboardButton(text="–û—Ç—á–µ—Ç –Ω–µ–¥–µ–ª—è"), KeyboardButton(text="–û—Ç—á–µ—Ç –¥–µ–Ω—å")],
            [KeyboardButton(text="–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel"), KeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ PNG")],
        ],
        resize_keyboard=True
    )
    await message.answer("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=keyboard)

@router.message(F.text == "–î–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—Ö–æ–¥")
async def handle_add_expense(message: types.Message, state: FSMContext):
    if message.from_user.id not in AUTHORIZED_USERS:
        await message.answer("–í—ã –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω—ã. –í–≤–µ–¥–∏—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return
    kb = ReplyKeyboardBuilder()
    for cat in CATEGORIES:
        kb.add(KeyboardButton(text=cat))
    kb.adjust(2)
    await state.set_state(ExpenseForm.category)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:", reply_markup=kb.as_markup(resize_keyboard=True))

@router.message(ExpenseForm.category)
async def process_category(message: types.Message, state: FSMContext):
    if message.text not in CATEGORIES:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–ª—å–∫–æ –∏–∑ –∫–Ω–æ–ø–æ–∫.")
        return
    await state.update_data(category=message.text)
    await state.set_state(ExpenseForm.title)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏:")

@router.message(ExpenseForm.title)
async def process_title(message: types.Message, state: FSMContext):
    await state.update_data(title=message.text.strip())
    await state.set_state(ExpenseForm.amount)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É (–±–µ–∑ —Ä—É–±):")

@router.message(ExpenseForm.amount)
async def process_amount(message: types.Message, state: FSMContext):
    try:
        amount = float(message.text.replace(",", "."))
    except ValueError:
        await message.answer("–ù–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —á–∏—Å–ª–æ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤–≤–æ–¥.")
        return
    data = await state.get_data()
    add_expense(message.from_user.first_name, data["category"], data["title"], amount)
    await message.answer(f"–ì–æ—Ç–æ–≤–æ! {data['category']} ‚Äî {data['title']} ‚Äî {amount:.2f} ‚ÇΩ")
    await state.clear()
    await show_main_menu(message)

@router.message(F.text == "–û—Ç—á–µ—Ç –º–µ—Å—è—Ü")
async def report_month(message: types.Message):
    rows = get_report("month")
    if not rows:
        await message.answer("–ù–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü.")
        return
    text = "üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –º–µ—Å—è—Ü:\n"
    for user, cat, total in rows:
        text += f"{user}: {cat} ‚Äî {total:.2f} ‚ÇΩ\n"
    await message.answer(text)

@router.message(F.text == "–û—Ç—á–µ—Ç –Ω–µ–¥–µ–ª—è")
async def report_week(message: types.Message):
    rows = get_report("week")
    if not rows:
        await message.answer("–ó–∞ –Ω–µ–¥–µ–ª—é –µ—â—ë –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return
    text = "üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ –Ω–µ–¥–µ–ª—é:\n"
    for user, cat, total in rows:
        text += f"{user}: {cat} ‚Äî {total:.2f} ‚ÇΩ\n"
    await message.answer(text)

@router.message(F.text == "–û—Ç—á–µ—Ç –¥–µ–Ω—å")
async def report_day(message: types.Message):
    rows = get_report("day")
    if not rows:
        await message.answer("–ó–∞ —Å–µ–≥–æ–¥–Ω—è –µ—â—ë –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–æ–≤.")
        return
    text = "üìä –†–∞—Å—Ö–æ–¥—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è:\n"
    for user, cat, total in rows:
        text += f"{user}: {cat} ‚Äî {total:.2f} ‚ÇΩ\n"
    await message.answer(text)

@router.message(F.text == "–≠–∫—Å–ø–æ—Ä—Ç –≤ Excel")
async def export_excel_handler(message: types.Message):
    try:
        file = build_excel_report()
        await message.answer_document(FSInputFile(file))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ Excel:\n<code>{e}</code>", parse_mode="HTML")


@router.message(F.text == "–ì—Ä–∞—Ñ–∏–∫ PNG")
async def plot_png_handler(message: types.Message):
    try:
        file = generate_plot()
        if not file:
            await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞.")
            return
        await message.answer_photo(FSInputFile(file))
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞:\n<code>{e}</code>", parse_mode="HTML")

# ===== MAIN =====
async def main():
    init_db()
    bot = Bot(token=API_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
    dp = Dispatcher(storage=MemoryStorage())
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
